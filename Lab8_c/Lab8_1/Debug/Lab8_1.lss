
Lab8_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000380  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000045ea  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003ca7  00000000  00000000  000049ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000688  00000000  00000000  00008671  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00008cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002d05  00000000  00000000  00008d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000076  00000000  00000000  0000ba69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000badf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  fc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 100:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 104:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 108:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 10c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 110:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 114:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 118:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 11c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 120:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 124:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 128:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 12c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 130:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 134:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 138:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 13c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 140:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 144:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 148:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 14c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 150:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 154:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 158:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 15c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 160:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 164:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 168:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 16c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 170:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 174:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 178:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 17c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 180:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 184:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 188:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 18c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 190:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 194:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 198:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 19c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 4b 01 	call	0x296	; 0x296 <main>
 218:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_exit>

0000021c <__bad_interrupt>:
 21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <Clock_init>:
#include <avr/io.h>

.global Clock_init
Clock_init:
	
	push r16							;Save the register
 220:	0f 93       	push	r16

	ldi r16, OSC_RC32MEN_bm				;Here we are enabling the 32MHz oscillator
 222:	02 e0       	ldi	r16, 0x02	; 2
	sts OSC_CTRL, r16					;
 224:	00 93 50 00 	sts	0x0050, r16	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

00000228 <OSC_Ready>:

OSC_Ready:
	lds r16, OSC_STATUS					;Load the oscillator status register
 228:	00 91 51 00 	lds	r16, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

	sbrs r16, OSC_RC32MRDY_bp			;Poll the 32MHz ready bit
 22c:	01 ff       	sbrs	r16, 1
	rjmp OSC_Ready						;Until the 32MHz oscillator is ready
 22e:	fc cf       	rjmp	.-8      	; 0x228 <OSC_Ready>

	ldi r16, 0xD8						;Now we must send the CPU_CPP register a 0xD8 signature to access protect IO registers
 230:	08 ed       	ldi	r16, 0xD8	; 216
	sts CPU_CCP, r16					;For only 4 clock cycles
 232:	00 93 34 00 	sts	0x0034, r16	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>

	ldi r16, (0x01 << CLK_SCLKSEL_gp)	;Here we are setting the protect clk register to come from the 32MHz oscillator
 236:	01 e0       	ldi	r16, 0x01	; 1
	sts CLK_CTRL, r16					;
 238:	00 93 40 00 	sts	0x0040, r16	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

0000023c <CLK_Prescalers>:

CLK_Prescalers:
	ldi r24, 0xD8						;Send the signature again
 23c:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r16					;
 23e:	00 93 34 00 	sts	0x0034, r16	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	
	ldi r16, ((0x00 << CLK_PSADIV_gp) + (0x00 << CLK_PSBCDIV_gp))	;This doesn't do anything the the prescaller
 242:	00 e0       	ldi	r16, 0x00	; 0
	;ldi r16, ((0x03 << CLK_PSADIV_gp) + (0x00 << CLK_PSBCDIV_gp))				;But this would set our first prescaler (A) to divide by 4
	sts CLK_PSCTRL, r16												;To get us 8MHz
 244:	00 93 41 00 	sts	0x0041, r16	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>

	pop r16								;Restore r16 register
 248:	0f 91       	pop	r16

 24a:	08 95       	ret

0000024c <DAC_init>:
 */ 

#include "DAC_Drivers.h"

void DAC_init(void)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
	//DAC Init function will enable the DAC to send a 1V voltage signal
	
	PORTA.DIRSET = PIN3_bm;
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	96 e0       	ldi	r25, 0x06	; 6
 258:	28 e0       	ldi	r18, 0x08	; 8
 25a:	fc 01       	movw	r30, r24
 25c:	21 83       	std	Z+1, r18	; 0x01
	
	DACA.CTRLA = DAC_CH1EN_bm;
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	93 e0       	ldi	r25, 0x03	; 3
 262:	28 e0       	ldi	r18, 0x08	; 8
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
	DACA.CTRLB = (0x01 << DAC_CHSEL_gp);
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	93 e0       	ldi	r25, 0x03	; 3
 26c:	20 e2       	ldi	r18, 0x20	; 32
 26e:	fc 01       	movw	r30, r24
 270:	21 83       	std	Z+1, r18	; 0x01
	DACA.CTRLC = (0x03 << DAC_REFSEL_gp);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	93 e0       	ldi	r25, 0x03	; 3
 276:	28 e1       	ldi	r18, 0x18	; 24
 278:	fc 01       	movw	r30, r24
 27a:	22 83       	std	Z+2, r18	; 0x02
	
	DACA.CTRLA |= DAC_ENABLE_bm;
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	93 e0       	ldi	r25, 0x03	; 3
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	33 e0       	ldi	r19, 0x03	; 3
 284:	f9 01       	movw	r30, r18
 286:	20 81       	ld	r18, Z
 288:	21 60       	ori	r18, 0x01	; 1
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
 28e:	00 00       	nop
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <main>:
#include "DAC_Drivers.h"

extern void Clock_init(void);

int main(void)
{
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
	Clock_init();
 29e:	0e 94 10 01 	call	0x220	; 0x220 <Clock_init>
	DAC_init();
 2a2:	0e 94 26 01 	call	0x24c	; 0x24c <DAC_init>
	
	//PORTC.DIRSET = PIN7_bm;
	//PORTCFG.CLKEVOUT = 0x01;
	
	DACA.CH1DATA = 0x687;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	93 e0       	ldi	r25, 0x03	; 3
 2aa:	27 e8       	ldi	r18, 0x87	; 135
 2ac:	36 e0       	ldi	r19, 0x06	; 6
 2ae:	fc 01       	movw	r30, r24
 2b0:	22 8f       	std	Z+26, r18	; 0x1a
 2b2:	33 8f       	std	Z+27, r19	; 0x1b
	
    while (1) 
    {
    }
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <main+0x1e>

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
