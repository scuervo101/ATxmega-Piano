
Lab8_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00802000  0000030e  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000005f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005977  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003edb  00000000  00000000  0000600f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000935  00000000  00000000  00009eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  0000a820  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000048ff  00000000  00000000  0000a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000026  00000000  00000000  0000f1af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000f1d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	12 e2       	ldi	r17, 0x22	; 34
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee e0       	ldi	r30, 0x0E	; 14
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	22 e2       	ldi	r18, 0x22	; 34
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b2 e2       	ldi	r27, 0x22	; 34
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a0 30       	cpi	r26, 0x00	; 0
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
 244:	0c 94 85 01 	jmp	0x30a	; 0x30a <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <Clock_init>:
#include <avr/io.h>

.global Clock_init
Clock_init:
	
	push r16							;Save the register
 24c:	0f 93       	push	r16

	ldi r16, OSC_RC32MEN_bm				;Here we are enabling the 32MHz oscillator
 24e:	02 e0       	ldi	r16, 0x02	; 2
	sts OSC_CTRL, r16					;
 250:	00 93 50 00 	sts	0x0050, r16	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

00000254 <OSC_Ready>:

OSC_Ready:
	lds r16, OSC_STATUS					;Load the oscillator status register
 254:	00 91 51 00 	lds	r16, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

	sbrs r16, OSC_RC32MRDY_bp			;Poll the 32MHz ready bit
 258:	01 ff       	sbrs	r16, 1
	rjmp OSC_Ready						;Until the 32MHz oscillator is ready
 25a:	fc cf       	rjmp	.-8      	; 0x254 <OSC_Ready>

	ldi r16, 0xD8						;Now we must send the CPU_CPP register a 0xD8 signature to access protect IO registers
 25c:	08 ed       	ldi	r16, 0xD8	; 216
	sts CPU_CCP, r16					;For only 4 clock cycles
 25e:	00 93 34 00 	sts	0x0034, r16	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>

	ldi r16, (0x01 << CLK_SCLKSEL_gp)	;Here we are setting the protect clk register to come from the 32MHz oscillator
 262:	01 e0       	ldi	r16, 0x01	; 1
	sts CLK_CTRL, r16					;
 264:	00 93 40 00 	sts	0x0040, r16	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

00000268 <CLK_Prescalers>:

CLK_Prescalers:
	ldi r24, 0xD8						;Send the signature again
 268:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r16					;
 26a:	00 93 34 00 	sts	0x0034, r16	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	
	ldi r16, ((0x00 << CLK_PSADIV_gp) + (0x00 << CLK_PSBCDIV_gp))	;This doesn't do anything the the prescaller
 26e:	00 e0       	ldi	r16, 0x00	; 0
	;ldi r16, ((0x03 << CLK_PSADIV_gp) + (0x00 << CLK_PSBCDIV_gp))				;But this would set our first prescaler (A) to divide by 4
	sts CLK_PSCTRL, r16												;To get us 8MHz
 270:	00 93 41 00 	sts	0x0041, r16	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>

	pop r16								;Restore r16 register
 274:	0f 91       	pop	r16

 276:	08 95       	ret

00000278 <DAC_init>:

void DAC_init(void)
{
	//DAC Init function will enable the DAC to send a 1V voltage signal
	
	PORTA.DIRSET = PIN3_bm;
 278:	88 e0       	ldi	r24, 0x08	; 8
 27a:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	
	DACA.CTRLA = DAC_CH1EN_bm + DAC_ENABLE_bm;
 27e:	e0 e0       	ldi	r30, 0x00	; 0
 280:	f3 e0       	ldi	r31, 0x03	; 3
 282:	89 e0       	ldi	r24, 0x09	; 9
 284:	80 83       	st	Z, r24
	DACA.CTRLB = (0x01 << DAC_CHSEL_gp);
 286:	80 e2       	ldi	r24, 0x20	; 32
 288:	81 83       	std	Z+1, r24	; 0x01
	DACA.CTRLC = (0x03 << DAC_REFSEL_gp);
 28a:	88 e1       	ldi	r24, 0x18	; 24
 28c:	82 83       	std	Z+2, r24	; 0x02
 28e:	08 95       	ret

00000290 <DMA_init>:
 */ 
#include "DMA_Drivers.h"

void DMA_init(uint16_t source[], uint16_t length)
{
	DMA.CTRL |= DMA_RESET_bm;
 290:	e0 e0       	ldi	r30, 0x00	; 0
 292:	f1 e0       	ldi	r31, 0x01	; 1
 294:	20 81       	ld	r18, Z
 296:	20 64       	ori	r18, 0x40	; 64
 298:	20 83       	st	Z, r18
	
	DMA.CH0.CTRLA = DMA_CH_SINGLE_bm + DMA_CH_REPEAT_bm + DMA_CH_BURSTLEN_2BYTE_gc;
 29a:	25 e2       	ldi	r18, 0x25	; 37
 29c:	20 8b       	std	Z+16, r18	; 0x10
	
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BLOCK_gc + DMA_CH_SRCDIR_INC_gc + 
 29e:	29 e5       	ldi	r18, 0x59	; 89
 2a0:	22 8b       	std	Z+18, r18	; 0x12
						DMA_CH_DESTRELOAD_BURST_gc + DMA_CH_DESTDIR_INC_gc;
						
	DMA.CH0.TRIGSRC =  DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	23 8b       	std	Z+19, r18	; 0x13
	
	DMA.CH0.TRFCNT = length;
 2a6:	64 8b       	std	Z+20, r22	; 0x14
 2a8:	75 8b       	std	Z+21, r23	; 0x15
	DMA.CH0.REPCNT = 0x00;
 2aa:	16 8a       	std	Z+22, r1	; 0x16
	
	DMA.CH0.SRCADDR0 = (uint8_t)((uint32_t)((uintptr_t) source));
 2ac:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (uint8_t)((uint32_t)((uintptr_t) source) >> 8);
 2ae:	91 8f       	std	Z+25, r25	; 0x19
	DMA.CH0.SRCADDR2 = (uint8_t)((uint32_t)((uintptr_t) source) >> 16);
 2b0:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (uint8_t)((uint32_t)((uintptr_t) &DACA.CH1DATAL));
 2b2:	8a e1       	ldi	r24, 0x1A	; 26
 2b4:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (uint8_t)((uint32_t)((uintptr_t) &DACA.CH1DATAL) >> 8);
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	85 8f       	std	Z+29, r24	; 0x1d
	DMA.CH0.DESTADDR2 = (uint8_t)((uint32_t)((uintptr_t) &DACA.CH1DATAL) >> 16);
 2ba:	16 8e       	std	Z+30, r1	; 0x1e
	
	//DMA.CH0.CTRLB |= DMA_CH_TRNINTLVL_LO_gc;
	
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 2bc:	80 89       	ldd	r24, Z+16	; 0x10
 2be:	80 68       	ori	r24, 0x80	; 128
 2c0:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CTRL |= DMA_ENABLE_bm;
 2c2:	80 81       	ld	r24, Z
 2c4:	80 68       	ori	r24, 0x80	; 128
 2c6:	80 83       	st	Z, r24
 2c8:	08 95       	ret

000002ca <main>:

extern void Clock_init(void);

int main(void)
{
	PORTC.OUTSET = PIN7_bm;
 2ca:	e0 e4       	ldi	r30, 0x40	; 64
 2cc:	f6 e0       	ldi	r31, 0x06	; 6
 2ce:	80 e8       	ldi	r24, 0x80	; 128
 2d0:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN7_bm;
 2d2:	81 83       	std	Z+1, r24	; 0x01
	
	Clock_init();
 2d4:	0e 94 26 01 	call	0x24c	; 0x24c <Clock_init>
	DAC_init();
 2d8:	0e 94 3c 01 	call	0x278	; 0x278 <DAC_init>
	DMA_init(wave, (uint16_t)sizeof(wave));
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	72 e0       	ldi	r23, 0x02	; 2
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e2       	ldi	r25, 0x20	; 32
 2e4:	0e 94 48 01 	call	0x290	; 0x290 <DMA_init>
	TC_init();
 2e8:	0e 94 77 01 	call	0x2ee	; 0x2ee <TC_init>
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <main+0x22>

000002ee <TC_init>:

#include "TC_Drivers.h"

void TC_init(void)
{
	TCC0.CNT = 0x00;
 2ee:	e0 e0       	ldi	r30, 0x00	; 0
 2f0:	f8 e0       	ldi	r31, 0x08	; 8
 2f2:	10 a2       	std	Z+32, r1	; 0x20
 2f4:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 0x0048;
 2f6:	88 e4       	ldi	r24, 0x48	; 72
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	86 a3       	std	Z+38, r24	; 0x26
 2fc:	97 a3       	std	Z+39, r25	; 0x27
	//TCC0.INTCTRLA = (0x01);
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 2fe:	80 ec       	ldi	r24, 0xC0	; 192
 300:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 83       	st	Z, r24
 308:	08 95       	ret

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
