
Lab8_2b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00802000  000003b4  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00802200  00802200  00000648  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000006b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005265  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003dca  00000000  00000000  000059ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080a  00000000  00000000  00009777  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00009f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d9b  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014e  00000000  00000000  0000de07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000df55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_14>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	12 e2       	ldi	r17, 0x22	; 34
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e4 eb       	ldi	r30, 0xB4	; 180
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	22 e2       	ldi	r18, 0x22	; 34
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b2 e2       	ldi	r27, 0x22	; 34
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a1 30       	cpi	r26, 0x01	; 1
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
 244:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <Clock_init>:
#include <avr/io.h>

.global Clock_init
Clock_init:
	
	push r16							;Save the register
 24c:	0f 93       	push	r16

	ldi r16, OSC_RC32MEN_bm				;Here we are enabling the 32MHz oscillator
 24e:	02 e0       	ldi	r16, 0x02	; 2
	sts OSC_CTRL, r16					;
 250:	00 93 50 00 	sts	0x0050, r16	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

00000254 <OSC_Ready>:

OSC_Ready:
	lds r16, OSC_STATUS					;Load the oscillator status register
 254:	00 91 51 00 	lds	r16, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

	sbrs r16, OSC_RC32MRDY_bp			;Poll the 32MHz ready bit
 258:	01 ff       	sbrs	r16, 1
	rjmp OSC_Ready						;Until the 32MHz oscillator is ready
 25a:	fc cf       	rjmp	.-8      	; 0x254 <OSC_Ready>

	ldi r16, 0xD8						;Now we must send the CPU_CPP register a 0xD8 signature to access protect IO registers
 25c:	08 ed       	ldi	r16, 0xD8	; 216
	sts CPU_CCP, r16					;For only 4 clock cycles
 25e:	00 93 34 00 	sts	0x0034, r16	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>

	ldi r16, (0x01 << CLK_SCLKSEL_gp)	;Here we are setting the protect clk register to come from the 32MHz oscillator
 262:	01 e0       	ldi	r16, 0x01	; 1
	sts CLK_CTRL, r16					;
 264:	00 93 40 00 	sts	0x0040, r16	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

00000268 <CLK_Prescalers>:

CLK_Prescalers:
	ldi r24, 0xD8						;Send the signature again
 268:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r16					;
 26a:	00 93 34 00 	sts	0x0034, r16	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	
	ldi r16, ((0x00 << CLK_PSADIV_gp) + (0x00 << CLK_PSBCDIV_gp))	;This doesn't do anything the the prescaller
 26e:	00 e0       	ldi	r16, 0x00	; 0
	;ldi r16, ((0x03 << CLK_PSADIV_gp) + (0x00 << CLK_PSBCDIV_gp))				;But this would set our first prescaler (A) to divide by 4
	sts CLK_PSCTRL, r16												;To get us 8MHz
 270:	00 93 41 00 	sts	0x0041, r16	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>

	pop r16								;Restore r16 register
 274:	0f 91       	pop	r16

 276:	08 95       	ret

00000278 <DAC_init>:
 */ 

#include "DAC_Drivers.h"

void DAC_init(void)
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
	//DAC Init function will enable the DAC to send a 1V voltage signal
	
	PORTA.DIRSET = PIN3_bm;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	96 e0       	ldi	r25, 0x06	; 6
 284:	28 e0       	ldi	r18, 0x08	; 8
 286:	fc 01       	movw	r30, r24
 288:	21 83       	std	Z+1, r18	; 0x01
	
	DACA.CTRLA = DAC_CH1EN_bm + DAC_ENABLE_bm;
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	93 e0       	ldi	r25, 0x03	; 3
 28e:	29 e0       	ldi	r18, 0x09	; 9
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
	DACA.CTRLB = (0x01 << DAC_CHSEL_gp) + DAC_CH1TRIG_bm;
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	93 e0       	ldi	r25, 0x03	; 3
 298:	22 e2       	ldi	r18, 0x22	; 34
 29a:	fc 01       	movw	r30, r24
 29c:	21 83       	std	Z+1, r18	; 0x01
	DACA.CTRLC = (0x03 << DAC_REFSEL_gp);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	93 e0       	ldi	r25, 0x03	; 3
 2a2:	28 e1       	ldi	r18, 0x18	; 24
 2a4:	fc 01       	movw	r30, r24
 2a6:	22 83       	std	Z+2, r18	; 0x02
	DACA.EVCTRL = (0x00 << DAC_EVSEL_gp);
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	93 e0       	ldi	r25, 0x03	; 3
 2ac:	fc 01       	movw	r30, r24
 2ae:	13 82       	std	Z+3, r1	; 0x03
	
 2b0:	00 00       	nop
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <Interrupt_init>:
volatile uint8_t table_cnt = 0;

extern void Clock_init(void);

void Interrupt_init(void)
{
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 2c0:	80 ea       	ldi	r24, 0xA0	; 160
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	20 ea       	ldi	r18, 0xA0	; 160
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	f9 01       	movw	r30, r18
 2ca:	22 81       	ldd	r18, Z+2	; 0x02
 2cc:	21 60       	ori	r18, 0x01	; 1
 2ce:	fc 01       	movw	r30, r24
 2d0:	22 83       	std	Z+2, r18	; 0x02
	
	sei();
 2d2:	78 94       	sei
}
 2d4:	00 00       	nop
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <main>:

int main(void)
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
	Clock_init();
 2e4:	0e 94 26 01 	call	0x24c	; 0x24c <Clock_init>
	Interrupt_init();
 2e8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <Interrupt_init>
	DAC_init();
 2ec:	0e 94 3c 01 	call	0x278	; 0x278 <DAC_init>
	TC_init();
 2f0:	0e 94 b5 01 	call	0x36a	; 0x36a <TC_init>
	
    /* Replace with your application code */
    while (1) 
    {
		//while(!(DACA.STATUS & DAC_CH1DRE_bm));
		DACA.CH1DATA = wave[table_cnt];
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	93 e0       	ldi	r25, 0x03	; 3
 2f8:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <__data_end>
 2fc:	22 2f       	mov	r18, r18
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	20 50       	subi	r18, 0x00	; 0
 306:	30 4e       	sbci	r19, 0xE0	; 224
 308:	f9 01       	movw	r30, r18
 30a:	20 81       	ld	r18, Z
 30c:	31 81       	ldd	r19, Z+1	; 0x01
 30e:	fc 01       	movw	r30, r24
 310:	22 8f       	std	Z+26, r18	; 0x1a
 312:	33 8f       	std	Z+27, r19	; 0x1b
    }
 314:	ef cf       	rjmp	.-34     	; 0x2f4 <main+0x18>

00000316 <__vector_14>:
}

ISR(TCC0_OVF_vect)
{
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 326:	0f 92       	push	r0
 328:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 32c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 330:	0f 92       	push	r0
 332:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 336:	8f 93       	push	r24
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
	//while(!(DACA.STATUS & DAC_CH1DRE_bm));
	//DACA.CH1DATA = wave[table_cnt];
	table_cnt++;
 340:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <__data_end>
 344:	8f 5f       	subi	r24, 0xFF	; 255
 346:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <__data_end>
}
 34a:	00 00       	nop
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	8f 91       	pop	r24
 352:	0f 90       	pop	r0
 354:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 358:	0f 90       	pop	r0
 35a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 35e:	0f 90       	pop	r0
 360:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <TC_init>:

#include "TC_Drivers.h"
#include <avr/io.h>

void TC_init(void)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
	TCC0.CNT = 0x00;
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	98 e0       	ldi	r25, 0x08	; 8
 376:	fc 01       	movw	r30, r24
 378:	10 a2       	std	Z+32, r1	; 0x20
 37a:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 0x0048;
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	98 e0       	ldi	r25, 0x08	; 8
 380:	28 e4       	ldi	r18, 0x48	; 72
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	fc 01       	movw	r30, r24
 386:	26 a3       	std	Z+38, r18	; 0x26
 388:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.INTCTRLA = (0x01);
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	98 e0       	ldi	r25, 0x08	; 8
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	fc 01       	movw	r30, r24
 392:	26 83       	std	Z+6, r18	; 0x06
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 394:	80 e8       	ldi	r24, 0x80	; 128
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	20 ec       	ldi	r18, 0xC0	; 192
 39a:	fc 01       	movw	r30, r24
 39c:	20 83       	st	Z, r18
	
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	98 e0       	ldi	r25, 0x08	; 8
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	fc 01       	movw	r30, r24
 3a6:	20 83       	st	Z, r18
 3a8:	00 00       	nop
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
