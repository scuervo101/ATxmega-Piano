
Lab8_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000058e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000400  00802000  0000058e  00000622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00802400  00802400  00000a22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000a98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005ff9  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003feb  00000000  00000000  00006b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c2a  00000000  00000000  0000ab64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  0000b790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004bd7  00000000  00000000  0000b924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f0  00000000  00000000  000104fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000107eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_47>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_88>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	14 e2       	ldi	r17, 0x24	; 36
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee e8       	ldi	r30, 0x8E	; 142
 21c:	f5 e0       	ldi	r31, 0x05	; 5
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	24 e2       	ldi	r18, 0x24	; 36
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b4 e2       	ldi	r27, 0x24	; 36
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a3 30       	cpi	r26, 0x03	; 3
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
 244:	0c 94 c5 02 	jmp	0x58a	; 0x58a <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <Clock_init>:
#include <avr/io.h>

.global Clock_init
Clock_init:
	
	push r16							;Save the register
 24c:	0f 93       	push	r16

	ldi r16, OSC_RC32MEN_bm				;Here we are enabling the 32MHz oscillator
 24e:	02 e0       	ldi	r16, 0x02	; 2
	sts OSC_CTRL, r16					;
 250:	00 93 50 00 	sts	0x0050, r16	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

00000254 <OSC_Ready>:

OSC_Ready:
	lds r16, OSC_STATUS					;Load the oscillator status register
 254:	00 91 51 00 	lds	r16, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

	sbrs r16, OSC_RC32MRDY_bp			;Poll the 32MHz ready bit
 258:	01 ff       	sbrs	r16, 1
	rjmp OSC_Ready						;Until the 32MHz oscillator is ready
 25a:	fc cf       	rjmp	.-8      	; 0x254 <OSC_Ready>

	ldi r16, 0xD8						;Now we must send the CPU_CPP register a 0xD8 signature to access protect IO registers
 25c:	08 ed       	ldi	r16, 0xD8	; 216
	sts CPU_CCP, r16					;For only 4 clock cycles
 25e:	00 93 34 00 	sts	0x0034, r16	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>

	ldi r16, (0x01 << CLK_SCLKSEL_gp)	;Here we are setting the protect clk register to come from the 32MHz oscillator
 262:	01 e0       	ldi	r16, 0x01	; 1
	sts CLK_CTRL, r16					;
 264:	00 93 40 00 	sts	0x0040, r16	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

00000268 <CLK_Prescalers>:

CLK_Prescalers:
	ldi r24, 0xD8						;Send the signature again
 268:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r16					;
 26a:	00 93 34 00 	sts	0x0034, r16	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	
	ldi r16, ((0x00 << CLK_PSADIV_gp) + (0x00 << CLK_PSBCDIV_gp))	;This doesn't do anything the the prescaller
 26e:	00 e0       	ldi	r16, 0x00	; 0
	;ldi r16, ((0x03 << CLK_PSADIV_gp) + (0x00 << CLK_PSBCDIV_gp))				;But this would set our first prescaler (A) to divide by 4
	sts CLK_PSCTRL, r16												;To get us 8MHz
 270:	00 93 41 00 	sts	0x0041, r16	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>

	pop r16								;Restore r16 register
 274:	0f 91       	pop	r16

 276:	08 95       	ret

00000278 <DAC_init>:

void DAC_init(void)
{
	//DAC Init function will enable the DAC to send a 1V voltage signal
	
	PORTA.DIRSET = PIN3_bm;
 278:	88 e0       	ldi	r24, 0x08	; 8
 27a:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	
	DACA.CTRLA = DAC_CH1EN_bm + DAC_ENABLE_bm;
 27e:	e0 e0       	ldi	r30, 0x00	; 0
 280:	f3 e0       	ldi	r31, 0x03	; 3
 282:	89 e0       	ldi	r24, 0x09	; 9
 284:	80 83       	st	Z, r24
	DACA.CTRLB = (0x01 << DAC_CHSEL_gp);
 286:	80 e2       	ldi	r24, 0x20	; 32
 288:	81 83       	std	Z+1, r24	; 0x01
	DACA.CTRLC = (0x03 << DAC_REFSEL_gp);
 28a:	88 e1       	ldi	r24, 0x18	; 24
 28c:	82 83       	std	Z+2, r24	; 0x02
 28e:	08 95       	ret

00000290 <DMA_init>:
 */ 
#include "DMA_Drivers.h"

void DMA_init(uint16_t source[], uint16_t length)
{
	DMA.CTRL |= DMA_RESET_bm;
 290:	e0 e0       	ldi	r30, 0x00	; 0
 292:	f1 e0       	ldi	r31, 0x01	; 1
 294:	20 81       	ld	r18, Z
 296:	20 64       	ori	r18, 0x40	; 64
 298:	20 83       	st	Z, r18
	
	DMA.CH0.CTRLA = DMA_CH_SINGLE_bm + DMA_CH_REPEAT_bm + DMA_CH_BURSTLEN_2BYTE_gc;
 29a:	25 e2       	ldi	r18, 0x25	; 37
 29c:	20 8b       	std	Z+16, r18	; 0x10
	
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BLOCK_gc + DMA_CH_SRCDIR_INC_gc + 
 29e:	29 e5       	ldi	r18, 0x59	; 89
 2a0:	22 8b       	std	Z+18, r18	; 0x12
						DMA_CH_DESTRELOAD_BURST_gc + DMA_CH_DESTDIR_INC_gc;
						
	DMA.CH0.TRIGSRC =  DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	23 8b       	std	Z+19, r18	; 0x13
	
	DMA.CH0.TRFCNT = length;
 2a6:	64 8b       	std	Z+20, r22	; 0x14
 2a8:	75 8b       	std	Z+21, r23	; 0x15
	DMA.CH0.REPCNT = 0x00;
 2aa:	16 8a       	std	Z+22, r1	; 0x16
	
	DMA.CH0.SRCADDR0 = (uint8_t)((uint32_t)((uintptr_t) source));
 2ac:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (uint8_t)((uint32_t)((uintptr_t) source) >> 8);
 2ae:	91 8f       	std	Z+25, r25	; 0x19
	DMA.CH0.SRCADDR2 = (uint8_t)((uint32_t)((uintptr_t) source) >> 16);
 2b0:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (uint8_t)((uint32_t)((uintptr_t) &DACA.CH1DATAL));
 2b2:	8a e1       	ldi	r24, 0x1A	; 26
 2b4:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (uint8_t)((uint32_t)((uintptr_t) &DACA.CH1DATAL) >> 8);
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	85 8f       	std	Z+29, r24	; 0x1d
	DMA.CH0.DESTADDR2 = (uint8_t)((uint32_t)((uintptr_t) &DACA.CH1DATAL) >> 16);
 2ba:	16 8e       	std	Z+30, r1	; 0x1e
	
	//DMA.CH0.CTRLB |= DMA_CH_TRNINTLVL_LO_gc;
	
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 2bc:	80 89       	ldd	r24, Z+16	; 0x10
 2be:	80 68       	ori	r24, 0x80	; 128
 2c0:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CTRL |= DMA_ENABLE_bm;
 2c2:	80 81       	ld	r24, Z
 2c4:	80 68       	ori	r24, 0x80	; 128
 2c6:	80 83       	st	Z, r24
 2c8:	08 95       	ret

000002ca <Interrupt_init>:

extern void Clock_init(void);

void Interrupt_init(void)
{
	PMIC.CTRL |= PMIC_MEDLVLEN_bm + PMIC_LOLVLEN_bm;
 2ca:	e0 ea       	ldi	r30, 0xA0	; 160
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	82 81       	ldd	r24, Z+2	; 0x02
 2d0:	83 60       	ori	r24, 0x03	; 3
 2d2:	82 83       	std	Z+2, r24	; 0x02
	
	sei();
 2d4:	78 94       	sei
 2d6:	08 95       	ret

000002d8 <main>:
}

int main(void)
{
	PORTC.OUTSET = PIN7_bm;
 2d8:	e0 e4       	ldi	r30, 0x40	; 64
 2da:	f6 e0       	ldi	r31, 0x06	; 6
 2dc:	80 e8       	ldi	r24, 0x80	; 128
 2de:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN7_bm;
 2e0:	81 83       	std	Z+1, r24	; 0x01
	
	Clock_init();
 2e2:	0e 94 26 01 	call	0x24c	; 0x24c <Clock_init>
	DAC_init();
 2e6:	0e 94 3c 01 	call	0x278	; 0x278 <DAC_init>
	DMA_init(wave, (uint16_t)sizeof(wave));
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	72 e0       	ldi	r23, 0x02	; 2
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	92 e2       	ldi	r25, 0x22	; 34
 2f2:	0e 94 48 01 	call	0x290	; 0x290 <DMA_init>
	USART_init();
 2f6:	0e 94 b1 02 	call	0x562	; 0x562 <USART_init>
	Interrupt_init();
 2fa:	0e 94 65 01 	call	0x2ca	; 0x2ca <Interrupt_init>
	TC_init();
 2fe:	0e 94 16 02 	call	0x42c	; 0x42c <TC_init>
 302:	ff cf       	rjmp	.-2      	; 0x302 <main+0x2a>

00000304 <__vector_47>:
		//TC_Disable();
    }
}

ISR(TCE0_OVF_vect)
{
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	08 b6       	in	r0, 0x38	; 56
 310:	0f 92       	push	r0
 312:	18 be       	out	0x38, r1	; 56
 314:	09 b6       	in	r0, 0x39	; 57
 316:	0f 92       	push	r0
 318:	19 be       	out	0x39, r1	; 57
 31a:	0b b6       	in	r0, 0x3b	; 59
 31c:	0f 92       	push	r0
 31e:	1b be       	out	0x3b, r1	; 59
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	5f 93       	push	r21
 328:	6f 93       	push	r22
 32a:	7f 93       	push	r23
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	af 93       	push	r26
 332:	bf 93       	push	r27
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
	if(chg_Flag == 1)
 338:	80 91 00 24 	lds	r24, 0x2400	; 0x802400 <__data_end>
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	19 f4       	brne	.+6      	; 0x346 <__vector_47+0x42>
		chg_Flag = 0;
 340:	10 92 00 24 	sts	0x2400, r1	; 0x802400 <__data_end>
 344:	02 c0       	rjmp	.+4      	; 0x34a <__vector_47+0x46>
	else
	{
		TC_Disable();
 346:	0e 94 26 02 	call	0x44c	; 0x44c <TC_Disable>
		//DACA.CH1DATA = 0x0000;
	}
}
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0b be       	out	0x3b, r0	; 59
 366:	0f 90       	pop	r0
 368:	09 be       	out	0x39, r0	; 57
 36a:	0f 90       	pop	r0
 36c:	08 be       	out	0x38, r0	; 56
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <__vector_88>:

ISR(USARTD0_RXC_vect)
{
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	08 b6       	in	r0, 0x38	; 56
 384:	0f 92       	push	r0
 386:	18 be       	out	0x38, r1	; 56
 388:	09 b6       	in	r0, 0x39	; 57
 38a:	0f 92       	push	r0
 38c:	19 be       	out	0x39, r1	; 57
 38e:	0b b6       	in	r0, 0x3b	; 59
 390:	0f 92       	push	r0
 392:	1b be       	out	0x3b, r1	; 59
 394:	2f 93       	push	r18
 396:	3f 93       	push	r19
 398:	4f 93       	push	r20
 39a:	5f 93       	push	r21
 39c:	6f 93       	push	r22
 39e:	7f 93       	push	r23
 3a0:	8f 93       	push	r24
 3a2:	9f 93       	push	r25
 3a4:	af 93       	push	r26
 3a6:	bf 93       	push	r27
 3a8:	ef 93       	push	r30
 3aa:	ff 93       	push	r31
	received = USARTD0.DATA;
 3ac:	e0 ea       	ldi	r30, 0xA0	; 160
 3ae:	f9 e0       	ldi	r31, 0x09	; 9
 3b0:	80 81       	ld	r24, Z
 3b2:	80 93 02 24 	sts	0x2402, r24	; 0x802402 <received>
	USARTD0.DATA = received;
 3b6:	80 91 02 24 	lds	r24, 0x2402	; 0x802402 <received>
 3ba:	80 83       	st	Z, r24
	
	key_TC(received);
 3bc:	80 91 02 24 	lds	r24, 0x2402	; 0x802402 <received>
 3c0:	0e 94 29 02 	call	0x452	; 0x452 <key_TC>
	chg_Flag = 1;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	80 93 00 24 	sts	0x2400, r24	; 0x802400 <__data_end>
		
	if(received == 0x73)
 3ca:	80 91 02 24 	lds	r24, 0x2402	; 0x802402 <received>
 3ce:	83 37       	cpi	r24, 0x73	; 115
 3d0:	b1 f4       	brne	.+44     	; 0x3fe <__vector_88+0x86>
	{
		if(!tgl_Flag)
 3d2:	80 91 01 24 	lds	r24, 0x2401	; 0x802401 <tgl_Flag>
 3d6:	81 11       	cpse	r24, r1
 3d8:	0a c0       	rjmp	.+20     	; 0x3ee <__vector_88+0x76>
		{
			DMA_init(triangle, (uint16_t)sizeof(triangle));
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	72 e0       	ldi	r23, 0x02	; 2
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e2       	ldi	r25, 0x20	; 32
 3e2:	0e 94 48 01 	call	0x290	; 0x290 <DMA_init>
			tgl_Flag = 1;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 01 24 	sts	0x2401, r24	; 0x802401 <tgl_Flag>
 3ec:	08 c0       	rjmp	.+16     	; 0x3fe <__vector_88+0x86>
		}
		else
		{
			DMA_init(wave, (uint16_t)sizeof(wave));
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	72 e0       	ldi	r23, 0x02	; 2
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	92 e2       	ldi	r25, 0x22	; 34
 3f6:	0e 94 48 01 	call	0x290	; 0x290 <DMA_init>
			tgl_Flag = 0;
 3fa:	10 92 01 24 	sts	0x2401, r1	; 0x802401 <tgl_Flag>
		}
	}
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0b be       	out	0x3b, r0	; 59
 41a:	0f 90       	pop	r0
 41c:	09 be       	out	0x39, r0	; 57
 41e:	0f 90       	pop	r0
 420:	08 be       	out	0x38, r0	; 56
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <TC_init>:

#include "TC_Drivers.h"

void TC_init(void)
{
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 42c:	80 ec       	ldi	r24, 0xC0	; 192
 42e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	TCE0.CNT = 0x00;
 432:	e0 e0       	ldi	r30, 0x00	; 0
 434:	fa e0       	ldi	r31, 0x0A	; 10
 436:	10 a2       	std	Z+32, r1	; 0x20
 438:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.PER = 0xC350;
 43a:	80 e5       	ldi	r24, 0x50	; 80
 43c:	93 ec       	ldi	r25, 0xC3	; 195
 43e:	86 a3       	std	Z+38, r24	; 0x26
 440:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	86 83       	std	Z+6, r24	; 0x06
	
	TCE0.CTRLA = TC_CLKSEL_DIV64_gc;
 446:	85 e0       	ldi	r24, 0x05	; 5
 448:	80 83       	st	Z, r24
 44a:	08 95       	ret

0000044c <TC_Disable>:
}

void TC_Disable(void)
{
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
 44c:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 450:	08 95       	ret

00000452 <key_TC>:
}

void key_TC(uint8_t key)
{
	TCC0.CNT = 0x00;
 452:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
 456:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
	if(key == 0x77)								//C key
 45a:	87 37       	cpi	r24, 0x77	; 119
 45c:	49 f4       	brne	.+18     	; 0x470 <key_TC+0x1e>
	{
		TCC0.PER = 0x007A;
 45e:	e0 e0       	ldi	r30, 0x00	; 0
 460:	f8 e0       	ldi	r31, 0x08	; 8
 462:	8a e7       	ldi	r24, 0x7A	; 122
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	86 a3       	std	Z+38, r24	; 0x26
 468:	97 a3       	std	Z+39, r25	; 0x27
		TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 83       	st	Z, r24
 46e:	08 95       	ret
	}								
	
	else if(key == 0x33)						//CD key
 470:	83 33       	cpi	r24, 0x33	; 51
 472:	49 f4       	brne	.+18     	; 0x486 <key_TC+0x34>
	{
		TCC0.PER = 0x0073;
 474:	e0 e0       	ldi	r30, 0x00	; 0
 476:	f8 e0       	ldi	r31, 0x08	; 8
 478:	83 e7       	ldi	r24, 0x73	; 115
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	86 a3       	std	Z+38, r24	; 0x26
 47e:	97 a3       	std	Z+39, r25	; 0x27
		TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	80 83       	st	Z, r24
 484:	08 95       	ret
	}
	else if(key == 0x65)						//D key
 486:	85 36       	cpi	r24, 0x65	; 101
 488:	49 f4       	brne	.+18     	; 0x49c <key_TC+0x4a>
	{
		TCC0.PER = 0x006C;
 48a:	e0 e0       	ldi	r30, 0x00	; 0
 48c:	f8 e0       	ldi	r31, 0x08	; 8
 48e:	8c e6       	ldi	r24, 0x6C	; 108
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	86 a3       	std	Z+38, r24	; 0x26
 494:	97 a3       	std	Z+39, r25	; 0x27
		TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	80 83       	st	Z, r24
 49a:	08 95       	ret
	}
	else if(key == 0x34)						//DE key
 49c:	84 33       	cpi	r24, 0x34	; 52
 49e:	49 f4       	brne	.+18     	; 0x4b2 <key_TC+0x60>
	{
		TCC0.PER = 0x0066;
 4a0:	e0 e0       	ldi	r30, 0x00	; 0
 4a2:	f8 e0       	ldi	r31, 0x08	; 8
 4a4:	86 e6       	ldi	r24, 0x66	; 102
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	86 a3       	std	Z+38, r24	; 0x26
 4aa:	97 a3       	std	Z+39, r25	; 0x27
		TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	80 83       	st	Z, r24
 4b0:	08 95       	ret
	}
	else if(key == 0x72)						//E key
 4b2:	82 37       	cpi	r24, 0x72	; 114
 4b4:	49 f4       	brne	.+18     	; 0x4c8 <key_TC+0x76>
	{
		TCC0.PER = 0x0060;
 4b6:	e0 e0       	ldi	r30, 0x00	; 0
 4b8:	f8 e0       	ldi	r31, 0x08	; 8
 4ba:	80 e6       	ldi	r24, 0x60	; 96
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	86 a3       	std	Z+38, r24	; 0x26
 4c0:	97 a3       	std	Z+39, r25	; 0x27
		TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	80 83       	st	Z, r24
 4c6:	08 95       	ret
	}
	else if(key == 0x74)						//F key
 4c8:	84 37       	cpi	r24, 0x74	; 116
 4ca:	49 f4       	brne	.+18     	; 0x4de <key_TC+0x8c>
	{
		TCC0.PER = 0x005B;
 4cc:	e0 e0       	ldi	r30, 0x00	; 0
 4ce:	f8 e0       	ldi	r31, 0x08	; 8
 4d0:	8b e5       	ldi	r24, 0x5B	; 91
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	86 a3       	std	Z+38, r24	; 0x26
 4d6:	97 a3       	std	Z+39, r25	; 0x27
		TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	80 83       	st	Z, r24
 4dc:	08 95       	ret
	}
	else if(key == 0x36)						//FG key
 4de:	86 33       	cpi	r24, 0x36	; 54
 4e0:	49 f4       	brne	.+18     	; 0x4f4 <key_TC+0xa2>
	{
		TCC0.PER = 0x0056;
 4e2:	e0 e0       	ldi	r30, 0x00	; 0
 4e4:	f8 e0       	ldi	r31, 0x08	; 8
 4e6:	86 e5       	ldi	r24, 0x56	; 86
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	86 a3       	std	Z+38, r24	; 0x26
 4ec:	97 a3       	std	Z+39, r25	; 0x27
		TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	80 83       	st	Z, r24
 4f2:	08 95       	ret
	}
	else if(key == 0x79)						//G key
 4f4:	89 37       	cpi	r24, 0x79	; 121
 4f6:	49 f4       	brne	.+18     	; 0x50a <key_TC+0xb8>
	{
		TCC0.PER = 0x0051;
 4f8:	e0 e0       	ldi	r30, 0x00	; 0
 4fa:	f8 e0       	ldi	r31, 0x08	; 8
 4fc:	81 e5       	ldi	r24, 0x51	; 81
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	86 a3       	std	Z+38, r24	; 0x26
 502:	97 a3       	std	Z+39, r25	; 0x27
		TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	80 83       	st	Z, r24
 508:	08 95       	ret
	}
	else if(key == 0x37)						//GA key
 50a:	87 33       	cpi	r24, 0x37	; 55
 50c:	49 f4       	brne	.+18     	; 0x520 <key_TC+0xce>
	{
		TCC0.PER = 0x004C;
 50e:	e0 e0       	ldi	r30, 0x00	; 0
 510:	f8 e0       	ldi	r31, 0x08	; 8
 512:	8c e4       	ldi	r24, 0x4C	; 76
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	86 a3       	std	Z+38, r24	; 0x26
 518:	97 a3       	std	Z+39, r25	; 0x27
		TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	80 83       	st	Z, r24
 51e:	08 95       	ret
	}
	else if(key == 0x75)						//A key
 520:	85 37       	cpi	r24, 0x75	; 117
 522:	49 f4       	brne	.+18     	; 0x536 <key_TC+0xe4>
	{
		TCC0.PER = 0x0048;
 524:	e0 e0       	ldi	r30, 0x00	; 0
 526:	f8 e0       	ldi	r31, 0x08	; 8
 528:	88 e4       	ldi	r24, 0x48	; 72
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	86 a3       	std	Z+38, r24	; 0x26
 52e:	97 a3       	std	Z+39, r25	; 0x27
		TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	80 83       	st	Z, r24
 534:	08 95       	ret
	}
	else if(key == 0x38)						//AB key
 536:	88 33       	cpi	r24, 0x38	; 56
 538:	49 f4       	brne	.+18     	; 0x54c <key_TC+0xfa>
	{
		TCC0.PER = 0x0044;
 53a:	e0 e0       	ldi	r30, 0x00	; 0
 53c:	f8 e0       	ldi	r31, 0x08	; 8
 53e:	84 e4       	ldi	r24, 0x44	; 68
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	86 a3       	std	Z+38, r24	; 0x26
 544:	97 a3       	std	Z+39, r25	; 0x27
		TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	80 83       	st	Z, r24
 54a:	08 95       	ret
	}	
	else if(key == 0x69)						//B key
 54c:	89 36       	cpi	r24, 0x69	; 105
 54e:	41 f4       	brne	.+16     	; 0x560 <key_TC+0x10e>
	{
		TCC0.PER = 0x0040;	
 550:	e0 e0       	ldi	r30, 0x00	; 0
 552:	f8 e0       	ldi	r31, 0x08	; 8
 554:	80 e4       	ldi	r24, 0x40	; 64
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	86 a3       	std	Z+38, r24	; 0x26
 55a:	97 a3       	std	Z+39, r25	; 0x27
		TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	80 83       	st	Z, r24
 560:	08 95       	ret

00000562 <USART_init>:

#include "USART_Drivers.h"

void USART_init(void)
{
	PORTD.OUTSET = PORTD_TX;		//Here we must set the direct and the default output for the transmit pin
 562:	e0 e6       	ldi	r30, 0x60	; 96
 564:	f6 e0       	ldi	r31, 0x06	; 6
 566:	88 e0       	ldi	r24, 0x08	; 8
 568:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PORTD_TX;		//
 56a:	81 83       	std	Z+1, r24	; 0x01
	
	PORTD.DIRCLR = PORTD_RX;		//Enable the pin for USART receive to input
 56c:	84 e0       	ldi	r24, 0x04	; 4
 56e:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;		//Turned the receive pin into a low level interrupt
 570:	e0 ea       	ldi	r30, 0xA0	; 160
 572:	f9 e0       	ldi	r31, 0x09	; 9
 574:	80 e2       	ldi	r24, 0x20	; 32
 576:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.CTRLB = USART_RXEN_bm + USART_TXEN_bm;		//enable the receiver and transmitter
 578:	88 e1       	ldi	r24, 0x18	; 24
 57a:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc + USART_PMODE_EVEN_gc + USART_CHSIZE_8BIT_gc;	//Frame options, asynchronous, even parity, 8-bit data
 57c:	83 e2       	ldi	r24, 0x23	; 35
 57e:	85 83       	std	Z+5, r24	; 0x05
	USARTD0.BAUDCTRLA = (0xFF & BSel);					//Baud rate => bsel
 580:	85 e7       	ldi	r24, 0x75	; 117
 582:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (0xF0 & BScale << 4) + (0x0F & BSel >> 8);			//Baud rate => bscale/ bsel
 584:	80 ed       	ldi	r24, 0xD0	; 208
 586:	87 83       	std	Z+7, r24	; 0x07
 588:	08 95       	ret

0000058a <_exit>:
 58a:	f8 94       	cli

0000058c <__stop_program>:
 58c:	ff cf       	rjmp	.-2      	; 0x58c <__stop_program>
